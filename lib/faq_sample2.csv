"question","answer","create_user_id","update_user_id","category_id"
"ターミナルとテキストエディタ（sublime）の違いは何ですか？","CUIの意味を説明する簡単に言うと、メモ帳のようなもの。何故これを使うのか？」を伝える。
「コードを書いて、保存するために使うソフト」です","1","","1"
"irbとrails cの違いは？","・irb
Rubyのコードを簡単に試すことができるツール
起動してすぐRubyのコードを書いて実行し、どのような結果になるのかを見ることができる
・rails c 
アプリケーション下でコードを試すことができるコマンド
くｒす","","","2"
"返り値って具体的に何をしてくれるの？存在意義がわからない","
返り値は戻り値とも言い、オブジェクトやメソッドが処理された後の最終的な値を呼び出し元に返している。Rubyのオブジェクト自体、またはメソッドを利用した式には、全て返り値がある。
","","","2"
"返り値のnilって何ですか？","nilとは、「何も無い」を表すオブジェクト。
0はRubyにおいては数字オブジェクトの0が「ある」ということなので、これと区別するためにnilが用意されている","","","2"
"定数ってどういう時に使うんですか？","コードを書いた人が再代入しないと決めた変数。
例えば円周率は絶対に変わらない数値のため定数にする。
※定数を定義したのに再代入できるが、警告が出る仕様となっている

<ルール>
定数はアルファベットの大文字で始まる。ただし、慣習として識別子はすべて大文字で、単語の区切りを「_」としする。クラスで定義できるが、メソッドの中では定義できない。値が代入されることによって初期化・定義されるため、定義されていない定数にアクセスすると例外が発生する。また、定義されている定数に値を代入しようとすると警告が出る。
参考：http://www.task-notes.com/entry/20141124/1416761738
","","","2"
"＋での連結と式展開どちらを使うの？","文量も少ないことから式展開を使うことの方が多いです。","","","2"
"input = getsってどういう動きをしている？","まず、「input = gets」という式を「=が1つある式」と捉えてもらうことから始める。
「=が1つある式」はどんな場合でも「右の値を左の変数に代入する」という意味になる。
今回の場合、右の値は「gets」というRubyに元々用意されているメソッドである。
getsは、実行されるとターミナルが入力待ちの状態になり、そこから人が入力した値が返り値となるメソッド。","","","2"
"hashと配列の違いは？","・ハッシュ
ハッシュとは、文字列やシンボルなどをキーにしてオブジェクトを格納する
シンボルとは、文字列に似たオブジェクトで、Rubyがメソッドなどの名前の識別に使うラベルをオブジェクトにしたもの
参考：楽しいRuby p.36
<オブジェクトとは>
プログラミングの処理の対象とオブジェクトとして考える
オブジェクト指向言語における「オブジェクト」とは、このような何らかのデータ（あるいはデータの集合）とそのデータを操作するための手続きをまとめたもの
参考：楽しいRuby P.162
・配列
配列は、いくつかのオブジェクトを順序つきで格納したオブジェクト。","","","2"
"hashがよくわからない(例えてほしい)","複数の引き出しがあるタンスがあり、引き出しの中に情報を保存できる。情報を後から取り出す際に困らないよう、各引き出しにはラベルがつけられている。このラベルがキーであり、保存されている情報がバリュー。","","","2"
"posts = []をなぜここに配置するのは答えを見ても分からない","posts=[]をどこの行に足すかは3通り。
①繰り返し処理whileよりも前(while文の外)→正解
②whileで繰り返されている処理の中→不正解
③どれかのメソッドの中(postReviewなど)→不正解

<不正解の理由>
②whileの中で定義してしまうと、メニューが表示されるたびに配列の中身が空になっていまうため。
③これも結局posts = []を書いたどれかのメソッドが呼ばれるたびに配列が空になってしまう。

","","","2"
"tanakaの流れが全くわからないので分かりやすく説明をして欲しい","① “Tanaka”が変数nameに代入される
② 関数rename(name)が呼ばれ、引数のnameが関数rename(a_name)のa_nameに渡される
③ “Mr.Tanaka”が変数a_nameに代入される
④ 関数renameの返り値a_nameが変数nameに代入される
⑤ 変数nameが出力される
参考：https://youtu.be/9xizkYCwzTY
","","","2"
"post_reviewが呼ばれてからの流れがわからないので説明をして欲しい","①配列オブジェクトpostsを引数としてメソッドpost_reviewを呼び出す。
②ハッシュpostを定義する
③genre、title、reviewというキーのバリューをそれぞれ入力する。
④配列a_postsにハッシュpostを追加する
⑤a_postsをメソッドの呼び出し元に返す
","","","2"
"eachの動きを説明して欲しい","レシーバは必ず配列である。eachメソッド自体が配列クラスのインスタンスメソッドであるため。","","","2"
"どんな時にクラスを使うのか？メリットは？","クラスとは、オブジェクトの種類を表すこと。オブジェクトの振る舞いを決める、雛形、あるいは設計図のようなもの。
オブジェクトがどのような性質を持つのかは、オブジェクトが属するクラスによって決まる
すでに、定義されているクラスを拡張して新しいクラスを作ることを継承という。
継承によって、既存のクラスには変更を加えずに新しい機能を追加したり、部分的にカスタマイ
ズしたりして、新しいクラスを作ることが出来る。
<モジュール>
モジュールは処理の部分だけをまとめたもの
モジュールはクラスと違って、
インスタンスをもつことが出来ない
継承することが出来ない
ということが違う
(オブジェクト指向のコードと手続き型のコードを並べて比べてもらう)","","","2"
"クラスメソッドとインスタンスメソッドの違いがいまいち分からない","まずこの時点では、そういう種類のメソッドがあるのだ、というぼやっとした理解で十分。
クラスとインスタンスの原則からすると、
メインで使うのはインスタンスメソッド。
そのクラスから生み出されたインスタンスが利用できる技が、インスタンスメソッド。
クラスメソッドは、「クラス全体に関係すること」で何か行いたい場合に利用することが多い。

・クラスメソッド
クラスそのもの（クラスオブジェクト）をレシーバとするメソッド
クラスメソッドは、インスタンスに対する操作ではなく、そのクラスに関連する操作のために使う
例えば、インスタンスを生成するときには、クラスメソッドを使用する
Array.new
Time.now
・インスタンスメソッド
あるオブジェクト(インスタンス)があったとき、そのオブジェクトをレシーバとするメソッドのこと
p ""10,20,30"".split("","")  #=> [""10"", ""20"",""30""]
p [1, 2, 3].index(2)  #=> 1
・関数的メソッド
レシーバがないメソッドのこと
レシーバに該当するオブジェクトがないのではなく、関数的メソッドのときにはそれが省略されている
レシーバの状態によって、結果が変わることがないようになっている
print ""hello!""
sleep(10)
参考：たのしいRuby 第４版","","","2"
"クラス変数を使う時とインスタンス変数を使う時の使い分け","""クラス・メソッドとインスタンスメソッド同様、
この時点ではそういったものがあるのだという理解だけでOK。
使い分けとかを気にする必要は無い。
あとで出てきた際に、あーそんなものもあったねと振り替えれればOK。頭を悩ませるのは、時間がもったいない。""

クラスを通して、共通の値を定義するとき→クラス変数を使用
個々のインスタンスによって別々の値を定義するとき→インスタンス変数を使用
<クラス変数>
クラス全体で使用できる変数
<インスタンス変数>
共通の属性としてインスタンスに定義できる変数
","","","2"
"initializeメソッドってなぜ使う必要あるんですか？(使わなくても実装できそう)
また他の名前でも同じようなメソッドとしては適用できるのでしょうか？
","「initialize」メソッドを使うことでオブジェクト作成時に必ず実行したい処理をメソッドを呼び出すことなく実行することが出来る。

「あるクラスを用意した際、絶対に必要である属性値をもれなく持たせるため」というのがinitializeの存在意義を説明する時に納得感をもたれやすいです。
人間を表すHumanクラスを作成したならば、必ず名前、年齢、性別といった情報はインスタンスに持たせたいよね？といった説明です。


参考：http://www.rubylife.jp/ini/class/index5.html

例えば、reviewアプリで作成するreviewクラスは、必ずgenre, title, reviewの3つの情報を持っている必要がある。
このように、クラスとインスタンスの仕組みを利用する際はあるクラスのインスタンスが必ず持っているべき情報を期待することがほとんどである。そんな時、initializeメソッドを利用することで情報を持つことを保証することができる。","","","2"
"以下のfiz buzzの模範解答ですが、ifの入れ子じゃダメなのか？
https://gyazo.com/d6be4a5cf08487fb7c429b3691f4801e","ifの入れ子でも実装は可能であるが、
elsifをつかうことでif文を使う量を減らし、文量的にも見やすく実装することができる","","","2"
"なんで15の判定が最初なんですか？","3の倍数である数字と5の倍数である数字は15の倍数であるため。
3の倍数または5の倍数の条件を先に書いてしまった場合、3の倍数かつ5の倍数(15の倍数)の数が""Fizz""または""Buzz""と出力されてしまう。
","","","2"
"なぜnext_game = trueを定義しているのか、whileの中で何が行われいるのかが分からない","(while文の構造がわかっているのか、また、true/falseオブジェクトについてわかっているのかの確認をする)
while next_game do～endと記述をしているため。next_gameがtrueの場合はループさせる。while文の中では、jankenというメソッドを呼び出し、返り値をjankenという変数に代入している。jankenメソッドの中では、あいこの場合はtrueを返してwhile文を繰り返し、勝ち負けが決まった場合はfalseを返しwhile文から抜ける。","","","2"
"なぜdog.say_typeで「犬」が表示されるのか（どのタイミングでクラス変数が代入されているのか）","dog = Dog.newでDogクラスのインスタンスを作成したときに、initializeメソッドが自動的に呼ばれ、dogというインスタンスに紐づいたインスタンス変数@name、@dog_typeにそれぞれ”マロン”、”トイプードル”が代入される。dog.self_introductionでdogのインスタンスに対して、インスタンスメソッドself_introductionが呼び出されるので、@dog_typeはトイプードルとなる。","","","2"
"3つのインスタンスは別物ではないのか？なぜ合計値が表示される？","3つが別々のインスタンスだとしても、クラス内で共通の値として扱うことができるクラス変数に代入しているために、3つの合計を表示することができる。
インスタンスが生成される度にinitializeメソッドの中でクラス変数に値が足し合わされていくことで最終的に合計が表示される。
(図を書くか、コードの流れを1から説明することでより理解度が上がりそうです)","","","2"
"なぜname、caloryメソッドを定義する必要がある？","一度、name, caloryメソッドをコメントアウトしてしまう。

最終的にeachを利用してひとつひとつのインスタンスに対し共通の処理として@nameや@caloryを取り出す必要があるが、このままだとインスタンス変数へのアクセスができない。
そこで、レシーバのインスタンスが持つインスタンス変数の値を返すインスタンスメソッドを定義することで、インスタンスから直接インスタンス変数の値を引き出すような「food.name」といった記述をすることができるようになる。","","","2"
"ブロック要素とインライン要素の使い分け方","基本的にはブロック要素を利用することがほとんどである。
インライン要素は、テキストの一部分を囲い、その部分に対して特殊な効果を付与するために利用される。例えば、aタグ(リンク化)、bタグ(太文字化)などがある。","","","3"
"idとclassの使い分け方","・class
「種別名を割り当てる」
→ 同じclass名を、1ページ中に何度でも使える
・id
「固有の名前を割り当てる」
→ 同じid名は、1ページ中に1度しか使えない

class属性が対象の「種類・部類」を表しているに過ぎないのに対して、id属性は対象に「固有の名前」を付けて一意に表すために使われる。よって、1ページ中に同じid名は1度しか使えない。","","","3"
"floatした時の動きが分からない","https://youtu.be/Zicl07uDUOk
(動画を見てもわからないという質問がよくありましたので追加で説明する必要があります。)","","","3"
"clearfixが具体的にどういう動きをしているか分からない","https://youtu.be/Zicl07uDUOk
(動画を見てもわからないという質問がよくありましたので追加で説明する必要があります。)","","","3"
"marginとpaddingの違いは？","marginとは要素の外側の余白
padding(詰め物)とは要素の内側の余白

HTMLのブロック要素は以下のような構成となっている。
（内側）content - padding -  border  - margin （外側）
以下のリンク画像参照
http://scene-live.com/page.php?page=49
このような絵を書いてあげると良い","","","3"
"formのnameってどういう意味があるんですか？","入力された情報に固有の名前をつけることができる。","","","3"
"optionのvalueってどういう意味があるんですか？","その選択肢が選択された状態でsubmitされた時に、サーバー側に送られる情報を指定できる。
rails でいうparams[text; ""abc""]のabcの部分に当たる。","","","3"
"divタグは何の略称なのか","dividedの略","","","3"
"パラメーターはどうやって送られるのか実感がわかない","まずは、フォームに入力した値がparamsというハッシュのバリューとして入ってアプリケーションに送られ、コントローラ内で利用できる、ということについて確認する。

paramsはハッシュであるため、バリューのセットとなるキーも設定されている。

キーは、バリューとなる値を入力したHTMLのformを生成しているinputタグのname属性の値となっている。

","","","4"
"ストロングパラメーターないと結局実装者側にどんなデメリットが有るのでしょうか？","例えばusersにadminカラムを作成し、admin=1で管理者権限を付与していた場合。
以下のようなコマンドで外部の人間がadmin権限を持ったユーザーを作成できてしまうという
危険性・脆弱性を孕む

【例】pictweetのeditページで検証をする。
name属性をuser_idに変更し、フォームを2に変更すると、
params{user_id:2,.....}と入って送られる。
ユーザーのidが1でログインしている場合でもストロングパラメーターがないと、上記でuser_idが書き換えられてしまう。
","","","4"
"privateメソッドを使う利点がよくイメージつかない","①classの外部から呼ばれたら困るメソッドを守ることができる
→メソッドの中には、classの外部から呼び出されてしまうとエラーを起こすメソッドも存在する。そんな事態を事前に防ぐことができる。
②可読性が上がる
→classの外部から呼び出されるメソッドを探すときに、private以下の部分は目を通さなくて良い。","","","4"
"pry-railsの使い方がよくわからない","仮に実装を行った際にエラーが出た場合、どの時点でエラーが出ているのか、どの時点までは正しい値が取れているのか等を確認するために、binding.pryをコード中に記述する。

pry-rails・・・Rails向けに開発されたデバッグツール
pry-railsの機能の中で最も使用するのはbinding.pryという機能。これは、binding.pryという文字列をソースコードの中に記述することで、binding.pryという文字列が存在する部分でRailsの処理を止めることができるというもの。
デバッグツール・・・作業の際にバグの有無を確認したり、処理を止めてソースコードが正しいかを確認する際に使用するツール。

(実際にbindingを利用してparamsの中身などを確認してもらうと良いと思います。)","","","4"
"prefixを使うことのメリットがよくわからない","prefixを使用するとパスが一意に決まるため、他のパスと認識が間違うことがない。","","","4"
"アソシエーションが理解できないので教えて欲しい。
(どうテーブル同士がつながるのか、設定方法の確認を説明する)","https://youtu.be/ehmZjHT3q3o

https://youtu.be/58xy5uoHXyY","","","4"
"includesメソッド使用すると処理のスピードが早くなるってことでしょうか？","includesメソッドを使用することで、n+1問題を解決することができるので、処理のスピードが上がる。

<n+1問題>
データを呼び出す際に大量のSQLが発行されてしまう問題のこと
(実際にN + 1問題を起こして、見せてあげましょう)","","","4"
"HTTPリクエストはどの知識の概念なのでしょうか。","クライアントがWebサーバーへ送信する GET や POST などによる送信要求のことです。

HTTPとは、 WebサーバーとWebブラウザなどのクライアントが、HTMLで書かれた情報を送受信する際に使われる通信手段です。
HTTPの通信は通常クライアント側から開始します。HTTPは「HTTPリクエスト」と「HTTPレスポンス」とを分けて考えます。
HTTPリクエストはWebブラウザなどのクライアントからの要求になります。HTTPレスポンスはその要求に対するWebサーバーの応答のことです。","","","4"
"ダイレクトにパスを書くより、resourcesメソッド使ったほうが良いのでしょうか。","resources メソッドを利用した方が楽、かつ他の人が見た際もわかりやすくなります。","","","4"
"ネストすることによるメリットが良くわからないです。","https://youtu.be/8H1QZgYCAcw","","","4"
"renderをわざわざ使う理由が知りたいです。eachメソッドでもできますよね！？","管理がしやすくなるためです。
何かエラーが起こった際、問題が特定されているならばその箇所だけを見た方がわかりやすいはずです。
部分テンプレート内でエラーが起こった時、その部分以外のコードを見る必要はありません","","","4"
"renderにはどんなオプションがあるのでしょうか。それぞれ教えてほしいです。","・render partialオプション
renderメソッドに :partialというオプションをつけることで、明示的に部分テンプレート名を指定し、部分テンプレートを表示することができる

・render localsオプション
localsというオプションを用いると部分テンプレート内でその変数を使えるようになる。
・render collectionオプション
何回テンプレートを繰り返すのか指定できる。配列

下記①～③は同じ処理である
①<% @posts.each do |post| %>
　　<%= render partial: 'posts/post', locals: { post: post } %>
　<% end %>
②<%= render partial: 'posts/post', collection: @posts %>
③<%= render @posts %>
","","","4"
"MVCフレームワークとはなんでしょうか！？","Railsではルーティング→コントローラー→ビューの順番に処理が行われる。
またテーブルへ情報の受け渡しを行う際はコントローラー⇔モデルで処理が行われる。
このようにモデル(model)とビュー(view)とコントローラー(controller)を使用して処理を行なうシステムをそれぞれの頭文字を取ってMVCと呼ばれている。
(配布している要点チェックシートの図を用いて説明すると良い)","","","4"
"page per orderのメソッドの順番がよくわからない","①pageメソッドで何ページ目かを指定
②perメソッドで何件刻みかを指定
③orderメソッドで順番を指定","","","4"
"<% %>と<%= %>の違いがわからない。","画面に出力するかしないかの違い","","","4"
"bundlerは何で、どんなことをしてくれるのでしょうか。","■bundlerとは
Rubyのライブラリ管理ツールの事。(Railsでは既に標準で採用されている．)

■メリット
・ライブラリのバージョンの違いで動かない事がなくなる
・複数人のチームで開発している時にライブラリを増やしても何をインストールするのか気にしなくよい","","","4"
"bundle updateとbundle installの違い","■bundle install
bundle installを実行すると、railsは、gemfile.lockを元にgemのインストールを行います。この時、gemfile.lockに記述されていない、且つgemfileに記述されているgemがある場合、そのgemとそのgemに関連するgemをインストール後、gemfile.lockを更新します。

■bundle update
bundle updateを実行すると、Bundlerは、gemfileを元にgemのインストールを行います。その後、gemfile.lockを更新します。","","","4"
"gemfile.lockって何？","開発環境と運用環境とで同じ gem をインストールするために使います．","","","4"
"bundle execを付ける理由がわからないです","rakeコマンドやrailsコマンドなどはそれぞれrake、railsというgemによって使うことができるが、同じRubyのバージョンで複数のアプリケーションを開発していると、同じ名前のgemでもアプリケーションごとにバージョンが異なることがあるため。","","","4"
"atメソッドではなく、searchメソッドだけを使っていれば特に問題ないですよね？","取得したい要素が1つだけのときはatメソッドを使うべきである。理由はsearchメソッドを使うと取得したデータが配列として返ってくるので、その配列に対してeachメソッドを使って処理する必要がある。しかしatメソッドはsearchメソッドのように該当するものが複数あってもすべて取得はせず、最初の１つしか取得せず、string型で返ってくるため、繰り返し処理をする必要はなく、そのまま処理することができる。","","","4"
"inner_textメソッドとget_attributeメソッドの違いについて教えてほしいです","■ inner_textメソッド
searchメソッドで得られたHTML情報のテキストを取得したい場合、inner_textメソッドを使います。

■get_attributeメソッド
aタグ要素のHTMLはリンク先のURLを値とする属性hrefを持っています。このようなHTMLの属性の値を取得したい場合、get_attributeメソッドを使います。","","","4"
"reload!はどんな時にしようするのでしょうか","コンソール起動中にコードを修正・追記した際、コンソールはリアルタイムで変更内容を反映してくれない。
その際は通常、一度exitして再度 rails c コマンドを打ちコンソールを再起動するという手順を踏むが、 reload! コマンドを実行すると毎回exitせずともコンソールがコードの変更内容を読み込んでくれる。","","","4"
"7つのアクションを使うことによってメリットあるのでしょうか？他は何かあるのでしょうか？","RESTful(形容詞)に書くことができる。
REST(名詞)とはWebに運用したソフトウェア設計様式のこと。 これはURLで表現することができる。つまりURLに対してHTTPのメソッドである
・GET（取得） ・POST（作成） ・PATCH（PUT）（更新） ・DELETE（削除）
これを利用することで統一感のある、意味がつかみやすいURLを設計することができる。
またこの4つのメソッドを容易にしようするためにresourcesメソッドで生成される7つのアクションを使用することが推奨されている
","","","4"
"ActiveRecordってなんでしょうか。","1.WebアプリケーションはExcelの表形式のようなもの(リレーショナルデータベースと呼びます)で扱うデータを保管、管理しています。
ここからどのようにデータを引き出し、アプリケーション側で処理した上でユーザーに届けるのか、という問題を解決しなければいけません。
Rubyという言語は、「クラスとインスタンス」の仕組みを利用してデータを管理しています。なので、データベースから値を取得してくる際、「Excelの表形式での管理」から「クラスとインスタンスの仕組みによる管理」へとデータを変換しなければいけません。

2.リレーショナルデータベース(RDB)を操作する言語として、「SQL」というものがあります。これを利用すると、RDBから自由自在にデータを引き出すことができます。

3.一方、Rubyを用いてSQLを生成、実行することもできます。whereやfindといったメソッドは、受け取った引数を元にSQLを生成、実行し、RDBからデータを受け取ります。さらにそのデータを「Excelの表形式での管理」から「クラスとインスタンスの仕組みによる管理」に変換し返り値としています。
","","","4"
"ActiveRecord Relationクラスは配列なのでしょうか？","(ひとつ上の回答を踏まえて)
Activerecord::Relationクラスは、「ある条件による検索に当てはまり、DBから取り出してこられた情報が入った配列のようなもの」です。厳密には配列ではありませんが、配列のように扱うことができます。","","","4"
"レシーバが理解できない","あるオブジェクトに対して、メソッドを実行しようとした場合、そのメソッドの働きかけるオブジェクトのこと
インスタンスメソッドの中でselfと書くと、そのメソッドを利用したレシーバ自身が代入された変数のように扱うことができる

【例】
以下のコードを実行する際は ""abcabcabc""がレシーバ
 ""abcabcabc"".delete(""a"",""b"")","","","4"
"コントローラの継承って結局何をしているのでしょうか","あるコントローラー群の中で共通で行いたい処理を、
それを他のコントローラーへ継承することで、共通処理の記述箇所を１箇所のみで済ませることができ、保守性が上がる（修正時楽になる）。

例えばカリキュラム内ではapplication_controller.rbというコントローラーがすべてのコントローラに継承されている。
したがってこのコントローラ何に書いた記述はすべてのコントローラー実行時に実行される。
ユーザーがログインしていない場合、強制的にトップページにリダイレクトするなどの処理をこのapplicationコントローラに書くことがある。","","","4"
"layoutを変えたい時にcontrollerで指定するのでしょうか？","コントローラ内で 「layout 'レイアウトファイル名'」 と書くと、そのコントローラでのアクションが呼ばれたあと表示するビューのレイアウトファイルを指定できる。

※なにも指定しないとレイアウトファイルはapplication.html.erbとなる。","","","4"
"cacheって何？cookieの違いは何か","「キャッシュ」とは、何度も見るWebページがある場合に、2回目以降の閲覧時の表示スピードを上げるため、ページ内の画像やアイコンといったデータをパソコン内に保存する仕組み

「クッキー（cookie）」とはパソコンなどに蓄積されたWebブラウザ利用者の情報のことをいい、入力の手間を省くのに役立つ","","","4"
"cacheは実際に起きた場合はどう解消する？","・tmpディレクトリ下を消す
・ブラウザのキャッシュを消す(ブラウザの履歴を消す)","","","4"
"authenticate_user!とcurrent_userの違い＆用途","・authenticate_user!
ユーザーがログインしているかどうかを確認し、ログインしていない場合はログインページにリダイレクトする。
・current_user
deviseでログイン機能を実装すると使用することができるヘルパーメソッド。これは、現在ログイン中のユーザーのレコードを、userクラスのインスタンスとして取得することができるメソッド。

","","","4"
"first_or_initializeメソッドで、whereでレコードが見つからなかった場合の動作がよくわからない","user = User.where(nickname: ""Shinbo"").first_or_initializeの場合、データが空のインスタンスができるだけでなく、nicknameカラムに""Shinbo""が入る。","","","4"
"GitとGithubの違いは何か","・Git
プログラムソースなどの変更履歴を管理する分散型のバージョン管理システムのこと
・GitHub
このGitの仕組みを利用して、世界中の人々が自分の作品(プログラムコードやデザインデータなど)を保存、公開することができるようにしたウェブサービスの名称","","",""
"Github全体のフローを教えてください(実践しながら教えて欲しい)","①リモートリポジトリと、各人のローカルリポジトリを用意
②masterブランチから、各人がそれぞれの担当箇所作業用のブランチを切る
③担当箇所の作業が完了、リモートリポジトリに担当箇所のブランチをプッシュ
④リモートリポジトリで、担当箇所のブランチをmasterブランチに結合(マージ)
⑤各々のローカルリポジトリとリモートリポジトリを同期","","",""
"scaffoldは何か","scaffoldとはrailsに備わったコマンドで、ある概念に対するルーティング、コントローラー、ビュー、モデルとテーブルの記述やファイル作成を一度に自動でやってくれる。
他のコマンドを利用して、controllerやmodelを個別に作成する手間を省ける。この時作成されるルーティングは、railsの定める7つのアクションになる。

実際のscaffoldの使い方
rails g scaffold note title:string text:text
# noteという概念に対してscaffoldを利用。カラムはtitleとtextの2つ","","","4"
"CarrierWaveとPaperClipの違いは何か。概要を教えてほしい。","いろいろ凝ったことをやりたいなら、多機能な CarrierWave
シンプルな機能を手早く実装したいなら Paperclip
","","","4"
"■環境変数とは何か
概要を説明し以下2点についても教えてほしい。
・.bash_profileへの書き込み方
・簡単なvimの使い方","環境変数とは、サーバに登録して参照できる変数。外部に漏らしたくないパスワードなどの情報を、直接環境下においてしまうことで、不正に利用されるのを防ぐ。","","","1"
"JavaScriptで出来ることは何か","JavaScriptは、HTML/CSSで作成したサイトに視覚的なエフェクトなどの機能を付け加える言語。ある条件(例えば、ある要素の上にマウスポインタが重なった時など)に反応してデザインを変化させるといった、複雑なwebページを作成することができる。","","",""
"オブジェクトとは何か","Rubyを含めた数多くのオブジェクト指向プログラミング言語ではプログラムの処理の対象を「オブジェクト」として考える。プログラム言語で表現される処理の対象とはデータである。これまでに取り上げてきた数値や文字列や配列といったものも簡単なデータと言える。

オブジェクト指向言語における「オブジェクト」とは、こういった何らかのデータ(あるいはデータの集合)とそのデータを操作するための手続きをまとめたものである。","","",""
"DOMとは何か","Document Object Modelの略で、HTMLの一つ一つの要素を、JavaScriptのオブジェクトとして扱えるようにする仕組み。特にそのHTML一つ一つの要素に対応するオブジェクトのことを、DOMオブジェクトと呼ぶ。","","",""
"SCSSとCSSの違いは何か","SCSSでは、CSSの書き方に加えて、入れ子構造が表現できる、セレクタの条件の追加ができる等の便利な書き方をすることができる。
SCSSは最終的にCSSに変換（コンパイルと呼ぶ）されてからブラウザに送られる。","","",""
"configってなに？","設定のことです。railsの設定をこのディレクトリ配下にあるファイル群に記述します。","","",""
"image_tagの引数は、画像の名前で良いのはなぜ？","image_tagはパスを指定しない場合デフォルトで
同一rails プロジェクト内の
app/asset/images 配下のファイルを探しにいくため","","",""
"ヘルパーメソッドってどういう時に使うの？(自分で定義するときはどこで書けばよいのか)","viewをよりシンプルに書くためのメソッドを定義する。
また自身で定義することも可能→app/helpers以下に定義する","","",""
"authenticate_user! はどこに定義されている？","devise_controllerに定義されてある。よって、deviseをインストールすることで使えるメソッド。

<authenticate_user!>
ユーザーがログインしているかどうかを確認し、ログインしていない場合はログインページにリダイレクトする。

","","",""
"モジュールとは何か？","モジュールとはクラスの概念に似たものです。
モジュールはクラスに非常に似た構成を持っていますが大きな違いとしてクラスはクラスからオブジェクトを作成することが出来ますがモジュールでは作成することは出来ません。モジュールの利用方法としては「モジュール名.メソッド名」の形式で関数のように実行するか、または他のクラスの中にインクルードして利用することが出来ます。","","","2"
":confirmable を読み込む、とはどういう意味か？","deviseには複数のmoduleがあり、
その内の１つであるconfirmableも引数として指定することでmoduleとして読み込み、
使用することが出来ます。
参考: http://qiita.com/gakkie/items/6ef70c0788c3cbff81ee","","","4"
"SMTPサーバとは何？","メールの送信に使われる通信プロトコル(規格)SMTPに対応したメールサーバー。
一般的に以下のような流れでメールの送信は行われる。
送信者 ⇨ SMTPサーバー ⇨POPサーバー ⇨受信者

郵便に例えるとSMTPサーバーは郵便箱に当たる。
POPサーバーは郵便局の私書箱(受信者が取りに行く)

詳細は以下のリンクを参照：http://itpro.nikkeibp.co.jp/article/COLUMN/20071108/286748/","","","4"
"form_for と form_tagの違い、使い分けは？","form_for と form_tag どちらを使うべきかは、基本的にモデルの有無で判断する。入力フォームで入力するデータのモデルがあれば form_for を使い、入力するデータが特にモデルを持っていなければ form_tag を使う。
form_for: モデルがあるデータを扱うときに使う。(投稿フォームなど)
form_tag: 単にデータを特定のアクションに送りたい時に使う。（検索フォームなど）
","","","4"
"form_forの記述の際にprivate下でrequireの記述はなぜ必要なの？","form_forメソッドを使用したとき、paramsのハッシュの中にform_forの引数にあるインスタンスのモデル名がキーとなるハッシュが生成されるため。
params.require(:モデル名)とすることで、そのキーのバリューであるハッシュを取り出すことができる。
","","","4"
"through: :photos_tags という書き方は何故使うのか","has_manyのthroughオプションは、モデルに多対多の関連を定義するときに利用します。
throughという名前のとおり、「〜を経由する」という意味で利用します。","","","4"
"has_many through オプションがよくわからない","『has_manys through』は中間テーブルを用いて多対多の関係を表すときに使用する。具体例としてインスタグラムのように一つの写真に複数のタグが付いているSNSが挙げられる。一つの写真に東京/おしゃれ/カフェなど複数のタグが付いていて、さらに東京というタグがつけられた写真は複数存在する場合、写真のphotosテーブルとタグのtagsテーブルは多対多の関係になるので、中間テーブルとしてphotos_tagsテーブルを置き、一つのレコードにはtags_id×photos_idの組み合わせが記録され、どの写真がどのタグと結びついているかというリレーションを表す。","","","4"
"ポリモーフィック関連について、よくわからない","『polymorphic関連』は一つの子テーブルに対して同じ処理をする親テーブルが複数存在するときに使用し、これらの関係を一つのアソシエーション定義だけで表現することができる。具体例として画像をアップロードして企業の画像と自分の画像どちらにも設定できるサービスが挙げられる。この場合、アップロードされた画像は企業の画像と自分の画像の両方に紐づけられる。","","","4"
"コールバックはどのような際に利用する？","作成/保存/更新/削除/検証/等、特定のイベント発生時に処理を行いたいときに利用する","","","4"
"find_byとfindの違いは？","findメソッドはidのカラムに対してのみ検索をかけられるのに対し、find_byメソッドは検索条件として複数のカラムを指定できる。
","","","4"
"ワイヤーフレームとは何か","何を、どこに、どのようにが記述されたサイト設計図。顧客・設計者・プログラマ・デザイナの認識を合わせるための土台として用いる。","","","4"
"Bootstrapとは","Bootstrapは、Twitter社が提供しているCSS/JS(JavaScript)のフレームワーク。予めCSSが用意されており、利用者はhtmlにそのCSSに対応するclassを持ったhtml要素を書き足すだけで、まるでデザイナーが監修したかのような綺麗なページを作成することができる。","","","4"
"Bootstrapの特徴は何か","■レスポンシブデザインに対応する
12カラムのグリッドシステムがあり、ブラウザサイズに応じてグリッドシステムを反映させることができる
■多彩なテンプレートデザイン・パッケージがある
CSS3での表現だけではなく、jQueryを使用したカルーセルやモーダル、タブやツールチップなど、様々な機能が盛り込まれています。
無料でダウンロード出来るサイトも数多くあります。それなりにデザインに凝っているものや多機能のものは、かなりカスタマイズされているので有料がほとんどですが、一から作るのもそれなりに時間とコストが掛かるので、バランスをみて購入する価値はあると思います。
","","","4"